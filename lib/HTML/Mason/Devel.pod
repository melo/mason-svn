=head1 NAME

Devel.pod - Mason Developer's Manual

=head1 DESCRIPTION

This manual is written for content developers who know HTML and at
least a little Perl. The goal is to write, run, and debug Mason
components.

If you are the webmaster (or otherwise responsible for the Mason
installation), you should also read B<HTML::Mason::Admin>. There you
will find information about virtual site configuration, performance
tuning, component caching, and so on.

We strongly suggest that you have a working Mason to play with as you
work through these examples. Other component examples can be found in
the C<samples/> directory.

=head1 HOW TO USE THIS MANUAL

If you are just learning Mason and want to get started quickly, we
recommend the following sections:

o L<What Are Components?>

o L<In-Line Perl Sections>

o L<Calling Components>

o L<Passing Parameters>

o L<Initialization and Cleanup> (mainly C<E<lt>%initE<gt>>)

o L<Data Caching>

o L<Sending HTTP Headers>

o L<Common Traps>

=head1 WHAT ARE COMPONENTS?

The component - a mix of Perl and HTML - is Mason's basic building
block and computational unit. Under Mason, web pages are formed by
combining the output from multiple components.  An article page for a
news publication, for example, might call separate components for the
company masthead, ad banner, left table of contents, and article
body. Consider this layout sketch:

    +---------+------------------+
    |Masthead | Banner Ad        |
    +---------+------------------+
    |         |                  |
    |+-------+|Text of Article ..|
    ||       ||                  |
    ||Related||Text of Article ..|
    ||Stories||                  |
    ||       ||Text of Article ..|
    |+-------+|                  |
    |         +------------------+
    |         | Footer           |
    +---------+------------------+

The top level component decides the overall page layout, perhaps with
HTML tables. Individual cells are then filled by the output of
subordinate components, one for the Masthead, one for the Footer,
etc. In practice pages are built up from as few as one, to as many as
twenty or more components.

This component approach reaps many benefits in a web environment. The
first benefit is I<consistency>: by embedding standard design
elements in components, you ensure a consistent look and make it
possible to update the entire site with just a few edits. The second
benefit is I<concurrency>: in a multi-person environment, one person
can edit the masthead while another edits the table of contents.  A
last benefit is I<reuseability>: a component produced for one site
might be useful on another. You can develop a library of generally
useful components to employ on your sites and to share with others.

Most components emit chunks of HTML. "Top level" components, invoked
from a URL, represent an entire web page. Other, subordinate
components emit smaller bits of HTML destined for inclusion in top
level components.

Components receive form and query data from HTTP requests. When called
from another component, they can accept arbitrary parameter lists just
like a subroutine, and optionally return values.  This enables a type
of component that does not print any HTML, but simply serves as a
function, computing and returning a result.

Mason actually compiles components down to Perl subroutines, so you
can debug and profile component-based web pages with standard Perl
tools that understand the subroutine concept, e.g. you can use the
Perl debugger to step through components, and B<Devel::DProf> to
profile their performance.

=head1 IN-LINE PERL SECTIONS 

Here is a simple component example:

    <%perl>
    my $noun = 'World';
    my @time = split /[\s:]/, localtime;
    </%perl>
    Hello <% $noun %>,
    % if ( $time[3] < 12 ) {
    good morning.
    % } else {
    good afternoon.
    % }

After 12 pm, the output of this component is:

    Hello world, good afternoon.

This short example demonstrates the three primary "in-line" Perl
sections. In-line sections are generally embedded within HTML and
execute in the order they appear. Other sections (C<E<lt>%initE<gt>>, C<E<lt>%argsE<gt>>,
etc.) are tied to component events like initialization, cleanup,
and argument definition.

The parsing rules for these Perl sections are as follows:

=over

=item 1.

Blocks of the form <% xxx %> are replaced with the result of
evaluating xxx as a single Perl expression.  These are often used for
variable replacement. such as 'Hello, <% $name %>!'.

=item 2.

Lines beginning with a '%' character are treated as Perl. 

=item 3.

Multiline blocks of Perl code can be inserted with the C<E<lt>%perlE<gt>>
.. C<E<lt>/%perlE<gt>> tag. The enclosed text is executed as Perl and the return
value, if any, is discarded.

The C<E<lt>%perlE<gt>> tag is case-insensitive. It may appear anywhere in the
text, and may span any number of lines. C<E<lt>%perlE<gt>> blocks cannot be
nested inside one another.

=back

=head2 Examples and Recommended Usage

B<% lines>

Most useful for conditional and loop structures - if, while, foreach,
, etc. - as well as side-effect commands like assignments. Examples:

o Conditional code

    % my $ua = $r->header_in('User-Agent');
    % if ($ua =~ /msie/i) {
    Welcome, Internet Explorer users
    ...
    % } elsif ($ua =~ /mozilla/i) {
    Welcome, Netscape users
    ...
    % }

o HTML list formed from array

    <ul>
    % foreach $item (@list) {
    <li><% $item %>
    % }
    </ul>

o HTML list formed from hash

    <ul>
    % while (my ($key,$value) = each(%ENV)) {
    <li>
    <b><% $key %></b>: <% $value %>
    % }
    </ul>

o HTML table formed from list of hashes

    <table>
    <tr>
    % foreach my $h (@loh) {
    <td><% $h->{foo} %></td>
    <td bgcolor=#ee0000><% $h->{bar} %></td>
    <td><% $h->{baz} %></td>
    % }
    </tr>
    </table>

B<&lt;% xxx %&gt;>

Most useful for printing out variables, as well as more complex
expressions. Examples:

  Dear <% $name %>: We will come to your house at <% $address %> in the
  fair city of <% $city %> to deliver your $<% $amount %> dollar prize!

  The answer is <% ($y+8) % 2 %>.

  You are <% $age<18 ? 'not' : '' %> permitted to enter this site.

B<&lt;%perl&gt; xxx &lt;%/perl&gt;>

Useful for Perl blocks of more than a few lines.

=head1 MASON OBJECTS

This section describes the various objects in the Mason universe.
If you're just starting out, all you need to worry about initially
are the request objects.

=head2 Request Objects

Two global per-request objects are available to all components: $r and
$m.

$r, the mod_perl request object, provides a Perl API to the current
Apache request.  It is fully described in Apache.pod. Here is a
sampling of methods useful to component developers:

    $r->uri             # the HTTP request URI
    $r->header_in(..)   # get the named HTTP header line
    $r->content_type    # set or retrieve content-type
    $r->header_out(..)  # set or retrieve an outgoing header

    $r->content         # don't use this one! (see Tips and Traps)

$m, the Mason request object, provides an analogous API for Mason. All
Mason features not activated by syntactic tags are accessed via $m
methods.  You'll be introduced to these methods throughout this
document as they are needed.  For a description of all methods see
B<L<HTML::Mason::Request>>.

=head2 System Objects

Four system objects share the work of serving requests in Mason:
Lexer, Compiler, Interp, and ApacheHandler. The administrator creates
these objects and provides parameters that shape Mason's behavior. As
a pure component developer you shouldn't need to worry about or access
these objects, but occasionally we'll mention a relevant parameter.

=head2 Component Objects

Mason provides an object API for components, allowing you to query a
component's various asociated files, arguments, etc. For a description
of all methods see B<L<HTML::Mason::Component>>.  Typically you get a
handle on a component object from request methods like
C<$m-E<gt>current_comp> and C<$m-E<gt>fetch_comp>. 

Note that for many basic applications all you'll want to do with
components is call them, for which no object method is needed. See
next section.

=head1 CALLING COMPONENTS

Mason pages often are built not from a single component, but from
multiple components that call each other in a hierarchical fashion.

=head2 Components that output HTML

To call one component from another, use the <& &> tag:

    <& comp_path, [name=>value, ...] &>

=over

=item comp_path:

The component path. With a leading '/', the path is relative to the
component root (C<comp_root>). Otherwise, it is relative to the
location of the calling component.

=item name=>value pairs:

Parameters are passed as one or more name=>value pairs,
e.g. S<C<player=E<gt>'M. Jordan'>>. 

=back

comp_path may be a literal string (quotes optional) or a Perl expression
that evaluates to a string. To eliminate the need for quotes in most
cases, Mason employs some magic parsing: If the first character is
one of C<[A-Za-z0-9/_.]>, comp_path is assumed to be a literal
string running up to the first comma or &>. Otherwise, comp_path
is evaluated as an expression.

Here are some examples:

    # relative component paths
    <& topimage &>
    <& tools/searchbox &>

    # absolute component path
    <& /shared/masthead, color=>'salmon' &>

    # this component path MUST have quotes because it contains a comma
    <& "sugar,eggs", mix=>1 &>

    # variable component path
    <& $comp &>
    
    # variable component and arguments
    <& $comp, %args &>

    # you can use arbitrary expression for component path, but it cannot
    # begin with a letter or number; delimit with () to remedy this
    <& (int(rand(2)) ? 'thiscomp' : 'thatcomp'), id=>123 &>

Several request methods also exist for calling components.  C<$m-E<gt>comp>
performs the equivalent action to <& &>:

    $m->comp('/shared/masthead', color=>'salmon');

C<$m-E<gt>scomp> is like the sprintf version of C<$m-E<gt>comp>: it returns
the component output, allowing the caller to examine and modify it
before printing:

    my $masthead = $m->scomp('/shared/masthead', color=>'salmon');
    $masthead =~ ...;
    $m->out($masthead);

=head2 Components that compute values

So far you have seen components used solely to output HTML.  However,
components may also be used to compute a value. For example, you might
have a component C<is_netscape> that analyzes the user agent to
determine whether it is a Netscape browser:

    <%perl>
    my $ua = $r->header_in('User-Agent');
    return ($ua =~ /Mozilla/i && $ua !~ /MSIE/i) ? 1 : 0;
    </%perl>

Because components are implemented underneath with Perl subroutines,
they can return values and even understand scalar/list context.

The <& &> notation only calls a component for its side-effect, and
discards its return value, if any.  To get at the return value of a
component, use the C<$m-E<gt>comp> command:

    % if ($m->comp('is_netscape')) {
    Welcome, Netscape user!
    % }

Mason adds a C<return undef> to the bottom of each component to
provide an empty default return value. To return your own value from a
component, you I<must> use an explicit C<return> statement. You cannot
rely on the usual Perl trick of letting return values "fall through".

Generally components are divided into two types: those that output
HTML, and those that return a value. There is very little reason for
a component to do both. For example, it would not be very friendly
for C<is_netscape> to output "hi Mom" while it was computing its value,
thereby surprising the C<if> statement! Conversely, any value returned
by an HTML component would typically be discarded by the <& &> tag
that invoked it.

=head1 TOP-LEVEL COMPONENTS

The first component invoked for a page (the "top-level component")
resides within the DocumentRoot and is chosen based on the URL. For
example:

    http://www.foo.com/mktg/products?id=372

Apache resolves this URL to a filename,
e.g. /usr/local/www/htdocs/mktg/prods.html.  Mason loads and executes
that file as a component. In effect, Mason calls

    $m->comp('/mktg/products', id=>372)

This component might in turn call other components and execute some Perl
code, or it might be nothing more than static HTML.

=head2 dhandlers

What happens when a user requests a component that doesn't exist? In
this case Mason scans backward through the URI, checking each
directory for a component named I<dhandler> ("default handler").  If
found, the dhandler is invoked and is expected to use
C<$m-E<gt>dhandler_arg> as the parameter to some
access function, perhaps a database lookup or location in another
filesystem. In a sense, dhandlers are similar in spirit to Perl's
AUTOLOAD feature; they are the "component of last resort" when a URL
points to a non-existent component.

Consider the following URL, in which C<newsfeeds/> exists but not the
subdirectory C<LocalNews> nor the component C<Story1>:

    http://myserver/newsfeeds/LocalNews/Story1

In this case Mason constructs the following search path:

    /newsfeeds/LocalNews/Story1         => no such thing
    /newsfeeds/LocalNews/dhandler       => no such thing
    /newsfeeds/dhandler                 => found! (search ends)
    /dhandler

The found dhandler would read "LocalNews/Story1" from
C<$m-E<gt>dhandler_arg> and use it as a retrieval key into a
database of stories.

Here's how a simple /newsfeeds/dhandler might look:

    <& header &>
    <b><% $headline %></b><p>
    <% $body %>
    <& footer &>
    
    <%init>
    my $arg = $m->dhandler_arg;                # get rest of path
    my ($section,$story) = split("/",$arg);    # split out pieces
    my $sth = $DBH->prepare
	(qq{SELECT headline,body FROM news
            WHERE section=? AND story=?);
    $sth->execute($section,$story);
    my ($headline,$body) = $sth->fetchrow_array;
    return 404 if !$headline;                  # return "not found" if no such story
    </%init>

By default dhandlers do not get a chance to handle requests to a
directory itself (e.g. /newsfeeds). These are automatically deferred
to Apache, which generates an index page or a FORBIDDEN error.  Often
this is desirable, but if necessary the administrator can let in
directory requests as well; see L<Admin/Allowing directory requests>.

A component or dhandler that does not want to handle a particular request may
defer control to the next dhandler by calling C<$m-E<gt>decline>.

The administrator can customize the file name used for dhandlers, or
turn off dhandlers entirely, with the L<Interp/dhandler_name> Interp
parameter.

=head2 autohandlers

Autohandlers allow you to grab control and perform some action just
before Mason calls the top-level component.  This might mean adding a
standard header and footer, applying an output filter, or setting up
global variables.

Autohandlers are directory based.  When Mason determines the top-level
component, it checks that directory and all parent directories for a
component called "autohandler". If found, the autohandler is called
first.  After performing its actions, the autohandler typically calls
C<$m-E<gt>call_next> to transfer control to the original intended
component. 

C<$m-E<gt>call_next> works just like C<$m-E<gt>comp> except that the component path
and arguments are implicit. You can pass additional arguments to
C<$m-E<gt>call_next>; these are merged with the original arguments, taking
precedence in case of conflict.  This allows you, for example, to
override arguments passed in the URL.

Here is an autohandler that adds a common header and footer to each
page underneath its directory:

    <HTML>
    <HEAD><TITLE>McHuffy Incorporated</TITLE></HEAD>
    <BODY BGCOLOR="salmon">
    
    <% $m->call_next %>
    
    <HR>
    Copyright 1999 McHuffy Inc.
    </BODY>
    </HTML>

Same idea, using components for the header/footer:

    <& /shared/header &>
    <% $m->call_next %>
    <& /shared/footer &>

The next autohandler applies a filter to its pages, adding an absolute
hostname to relative image URLs:

    <% $m->call_next %>
    
    <%filter>
    s{(<img\s+src=\")/} {$1http://images.mysite.com/}ig;
    </%filter>

Most of the time autohandler can simply call C<$m-E<gt>call_next>
without needing to know what the next component is. However, should
you need it, the component object is available from
C<$m-E<gt>fetch_next>. This is useful for calling the component manually,
e.g. if you want to suppress some original arguments or if you want to
use C<$m-E<gt>scomp> to store and process the output.

What happens if more than one autohandler applies to a page? Prior to
version 0.85, only the most specific autohandler would execute.  In
0.85 and beyond each autohandler gets a chance to run.  The top-most
autohandler runs first; each C<$m-E<gt>call_next> transfers control to the
next autohandler and finally to the originally called component. This
allows you, for example, to combine general site-wide templates and
more specific section-based templates.

Autohandlers can be made even more powerful in conjunction with
Mason's object-oriented style features: methods, attributes, and
inheritance.  In the interest of space these are discussed in a
separate section, L<Devel/Object-Oriented Techniques>.

The administrator can customize the file name used for autohandlers,
or turn off autohandlers entirely, with the L<Interp/autohandler_name>
Interp parameter.

=head2 dhandlers vs. autohandlers

dhandlers and autohandlers both provide a way to exert control over a
large set of URLs. However, each specializes in a very different
application.  The key difference is that dhandlers are invoked only
when no appropriate component exists, while autohandlers are invoked
only in conjunction with a matching component.

As a rule of thumb: use an autohandler when you have a set of
components to handle your pages and you want to augment them
with a template/filter. Use a dhandler when you want to create a set
of "virtual URLs" that don't correspond to any actual components,
or to provide default behavior for a directory.

dhandlers and autohandlers can even be used in the same directory. For
example, you might have a mix of real URLs and virtual URLs to which
you would like to apply a common template/filter.

=head1 PASSING PARAMETERS

This section describes Mason's facilities for passing parameters to
components (either from HTTP requests or component calls) and for
accessing parameter values inside components.

=head2 In Component Calls

Any Perl data type can be passed in a component call:

    <& /sales/header, s=>'dog', l=>[2,3,4], h=>{a=>7,b=>8} &>

This command passes a scalar ($s), a list (@l), and a hash (%h). The
list and hash must be passed as references, but they will be automatically
dereferenced in the called component.

=head2 In HTTP requests

Consider a CGI-style URL with a query string:

    http://www.foo.com/mktg/prods.html?str=dog&lst=2&lst=3&lst=4

or an HTTP request with some POST content. Mason automatically parses
the GET/POST values and makes them available to the component as
parameters.

=head2 Accessing Parameters

Component parameters, whether they come from GET/POST or another
component, can be accessed in two ways.

1.  Declared named arguments: Components can define an
C<E<lt>%argsE<gt>> section listing argument names, types, and
default values. For example:

    <%args>
    $a       
    @b       # a comment
    %c

    # another comment
    $d=>5
    $e=>$d*2
    @f=>('foo','baz')
    %g=>(joe=>1,bob=>2)
    </%args>

Here, I<$a>, I<@b>, and I<%c> are required arguments; the component generates
an error if the caller leaves them unspecified. I<$d>, I<$e>, I<@f> and I<%g> are
optional arguments; they are assigned the specified default values if
unspecified.  All the arguments are available as lexically scoped ("my")
variables in the rest of the component.

Arguments are separated by one or more newlines. Comments may be used at
the end of a line or on their own line.

Default expressions are evaluated in top-to-bottom order, and one
expression may reference an earlier one (as $e references $d above).

Only valid Perl variable names may be used in C<E<lt>%argsE<gt>>
sections.  Parameters with non-valid variable names cannot be
pre-declared and must be fetched manually out of the %ARGS hash (see
below).  One common example of undeclarable parameters are the
"button.x/button.y" parameters sent for a form submit.

2. %ARGS hash: This variable, always available, contains all of the
parameters passed to the component (whether or not they were
declared).  It is especially handy for dealing with large numbers of
parameters, dynamically named parameters, or parameters with non-valid
variable names. %ARGS can be used with or without an
C<E<lt>%argsE<gt>> section, and its contents are unrelated to what you
have declared in C<E<lt>%argsE<gt>>.

Here's how to pass all of a component's parameters to another component:

    <& template, %ARGS &>

=head2 Parameter Passing Examples

The following examples illustrate the different ways to pass and receive parameters.

1.  Passing a scalar I<id> with value 5.

  In a URL: /my/URL?id=5
  In a component call: <& /my/comp, id => 5 &>
  In the called component, if there is a declared argument named...
    $id, then $id will equal 5
    @id, then @id will equal (5)
    %id, then an error occurs
  In addition, $ARGS{id} will equal 5.

2.  Passing a list I<colors> with values red, blue, and green.

  In a URL: /my/URL?colors=red&colors=blue&colors=green
  In an component call: <& /my/comp, colors => ['red', 'blue', 'green'] &>
  In the called component, if there is a declared argument named...
    $colors, then $colors will equal ['red', 'blue', 'green']
    @colors, then @colors will equal ('red', 'blue', 'green')
    %colors, then an error occurs
  In addition, $ARGS{colors} will equal ['red', 'blue', 'green'].

3.  Passing a hash I<grades> with pairs Alice => 92 and Bob => 87.

  In a URL: /my/URL?grades=Alice&grades=92&grades=Bob&grades=87
  In an component call: <& /my/comp, grades => {Alice => 92, Bob => 87} &>
  In the called component, if there is a declared argument named...
    $grades, then $grades will equal {Alice => 92, Bob => 87}
    @grades, then @grades will equal ('Alice', 92, 'Bob', 87)
    %grades, then %grades will equal (Alice => 92, Bob => 87)
  In addition, $ARGS{grades} will equal ['Alice',92,'Bob',87] in the
    URL case, or {Alice => 92, Bob => 87} in the component call case.
    (The discrepancy exists because, in a query string, there is no detectable
    difference between a list or hash.)

=head2 Using @_ instead

If you don't like named parameters, you can pass a traditional
list of ordered parameters:

    <& /mktg/prods.html', 'dog', [2,3,4], {a=>7,b=>8} &>

and access them as usual through Perl's @_ array:

    my ($scalar, $listref, $hashref) = @_;

In this case no C<E<lt>%argsE<gt>> section is necessary.

We generally recommend named parameters for the benefits of
readability, syntax checking, and default value automation.  However
using @_ may be convenient for very small components, especially
subcomponents created with C<E<lt>%defE<gt>>.

=head1 INITIALIZATION AND CLEANUP

The following sections contain blocks of Perl to execute at specific
times.

=head2 E<lt>%initE<gt>

This section contains initialization code that executes as soon as the
component is called. For example: checking that a user is logged in;
selecting rows from a database into a list; parsing the contents of a
file into a data structure.

Technically a E<lt>%initE<gt> block is equivalent to a E<lt>%perlE<gt>
block at the beginning of the component. However, there is an
aesthetic advantage of placing this block at the end of the component
rather than the beginning.

We've found that the most readable components (especially for
non-programmers) contain HTML in one continuous block at the top, with
simple substitutions for dynamic elements but no distracting blocks of
Perl code.  At the bottom an E<lt>%initE<gt> block sets up the substitution
variables.  This organization allows non-programmers to work with the
HTML without getting distracted or discouraged by Perl code. For example:

    <html>
    <head><title><% $headline %></title></head>
    <body>
    <h2><% $headline %></h2>
    By <% $author %>, <% $date %><p>
    
    <% $body %>
    
    </body></html>

    <%init>
    # Fetch article from database
    my $dbh = DBI::connect ...;
    my $sth = $dbh->prepare("select * from articles where id = ?");
    $sth->execute($article_id);
    my ($headline,$date,$author,$body) = $sth->fetchrow_array;
    # Massage the fields
    $headline = uc($headline);
    my ($year,$month,$day) = split('-',$date);
    $date = "$month/$day";
    </%init>

    <%args>
    $article_id
    </%args>

=head2 E<lt>%cleanupE<gt>

This section contains cleanup code that executes just before the
component exits. For example: closing a database connection or closing
a file handle.

Technically a E<lt>%cleanupE<gt> block is equivalent to a E<lt>%perlE<gt> block at the
end of the component. Since a component corresponds a subroutine block,
and since Perl is so darned good at cleaning up stuff at the end of blocks,
E<lt>%cleanupE<gt> sections are rarely needed.

=head2 E<lt>%onceE<gt>

This code executes once when the component is loaded. Variables
declared in this section can be seen in all of a component's code and
persist for the lifetime of the component.

Useful for declaring persistent component-scoped lexical variables
(especially objects that are expensive to create), declaring
subroutines (both named and anonymous), and initializing state.

This code does not run inside a request context. You cannot call
components or access $m from this section. Also, do not attempt to
return() from a C<E<lt>%onceE<gt>> section; the current compiler
cannot properly handle it.

Normally this code will execute individually from every HTTP child
that uses the component. However, if the component is preloaded, this
code will only execute once in the parent.  Unless you have total control
over what components will be preloaded, it is safest to avoid
initializing variables that can't survive a fork(), e.g. DBI handles.
Use the following trick to initialize such variables in the E<lt>%initE<gt>
section:

    <%once>
    my $dbh;    # declare but don't assign
    ...
    </%once>

    <%init>
    if ($m->current_comp->first_time) {
        $dbh = DBI::connect ...
    }
    ...
    </%init>

=head2 E<lt>%sharedE<gt>

As with C<E<lt>%onceE<gt>>, variables declared in this section can be seen in all
of a component's code: the main component, subcomponents, and methods.
However, the code runs once per request (whenever the component is used)
and its variables last only til the end of the request.

Useful for initializing variables needed in, say, the main body and
one more subcomponents or methods. See L<Devel/Object-Oriented
Techniques> for an example of usage.

Avoid using C<E<lt>%sharedE<gt>> for side-effect code that needs to run at a
predictable time during page generation. You may assume only that
C<E<lt>%sharedE<gt>> runs just before the first code that needs it and runs at
most once per request. C<E<lt>%initE<gt>> offers more a predictable execution
time.

Any component with a C<E<lt>%sharedE<gt>> section incurs an extra performance
penalty, because (as currently implemented) Mason must recreate its
anonymous subroutines the first time each new request uses the
component.  The exact penalty varies between systems and for most
applications will be unnoticeable. However, one should avoid using
C<E<lt>%sharedE<gt>> when patently unnecessary, e.g. when an C<E<lt>%initE<gt>> would work
as well.

Do not attempt to return() from a C<E<lt>%sharedE<gt>> section; the
current compiler cannot properly handle it.

=head1 EMBEDDED COMPONENTS

=head2 E<lt>%def I<name>E<gt>

Each instance of this section creates a I<subcomponent> embedded
inside the current component. Inside you may place anything that a
regular component contains, with the exception of C<E<lt>%defE<gt>>, C<E<lt>%methodE<gt>>,
C<E<lt>%onceE<gt>>, and C<E<lt>%sharedE<gt>> tags.

The I<name> consists of characters in the set C<[A-Za-z0-9._-]>. To
call a subcomponent simply use its name in <& &> or C<$m-E<gt>comp>. A
subcomponent can only be seen from the surrounding component.

If you define a subcomponent with the same name as a file-based
component in the current directory, the subcomponent takes
precedence. You would need to use an absolute path to call the
file-based component. To avoid this situation and for general clarity,
we recommend that you pick a unique way to name all of your
subcomponents that is unlikely to interfere with file-based
components. The author prefers to start subcomponent names with ".".

While inside a subcomponent, you may use absolute or relative paths to
call file-based components and also call any of your "sibling"
subcomponents.

The lexical scope of a subcomponent is separate from the main
component.  However a subcomponent can declare its own C<E<lt>%argsE<gt>> section
and have relevant values passed in.  You can also use a C<E<lt>%sharedE<gt>>
section to declare variables visible from both scopes.

In the following example, we create a ".link" subcomponent to produce a
standardized hyperlink:

    <%def .link>
    <font size="4" face="Verdana,Arial,Helvetica">
    <a href="http://www.<% $site %>.com"><% $label %></a>
    </font><br>
    <%args>
    $site
    $label=>ucfirst($site)
    </%args>
    </%def>
    
    Visit these sites:
    <ul>
    <li><& .link, site=>'yahoo' &><br>
    <li><& .link, site=>'cmp', label=>'CMP Media' &><br>
    <li><& .link, site=>'excite' &>
    </ul>

=head2 E<lt>%method I<name>E<gt>

Each instance of this section creates a I<method> embedded inside
the current component. Methods resemble subcomponents in terms of
naming, contents, and scope. However, while subcomponents can only be
seen from the parent component, methods are meant to be called from
other components.

There are two ways to call a method. First, via a path of the form
"comp:method":

    <& /foo/bar:method1 &>

    $m->comp('/foo/bar:method1');

Second, via the call_method component method:

    my $comp = $m->fetch_comp('/foo/bar');
    ...
    $comp->call_method('method1');

Methods are commonly used in conjunction with autohandlers to make
templates more flexible. See L<Devel/Object-Oriented Techniques> for
more information.

=head1 FLAGS AND ATTRIBUTES

The E<lt>%flagsE<gt> and E<lt>%attrE<gt> sections consist of key/value
pairs, one per line, joined by '=>'.  The key and value in each pair
must be valid Perl hash keys and values respectively. An optional
comment may follow each line.

=head2 E<lt>%flagsE<gt>

Use this section to set official Mason flags that affect the current
component's behavior.

Currently there is only one flag, <tt>inherit</tt>, which specifies
the component's <i>parent</i> in the form of a relative or absolute
component path. A component inherits methods and attributes from its
parent; see L<Devel/Object-Oriented Techniques> for examples.

    <%flags>
    inherit=>'/site_handler'
    </%flags>

=head2 E<lt>%attrE<gt>

Use this section to assign static key/value attributes that can be
queried from other components.

    <%attr>
    color=>'blue'
    fonts=>[qw(arial geneva helvetica)]
    </%attr>

To query an attribute of a component, use the C<attr> method:

    my $color = $comp->attr('color')

where $comp is a component object.

Mason evaluates attribute values once when loading the component.
This makes them faster but less flexible than methods.

=head1 FILTERING

This section describes several ways to apply filtering functions over
the results of the current component.  By separating out and hiding a
filter that, say, changes HTML in a complex way, we allow 
non-programmers to work in a cleaner HTML environment.

=head2 &lt;%filter&gt; section

The C<E<lt>%filterE<gt>> section allows you to arbitrarily filter the output of
the current component. Upon entry to this code, $_ contains the
component output, and you are expected to modify it in place. The code
has access to component arguments and can invoke subroutines, call
other components, etc.

This simple filter converts the component output to UPPERCASE:

    <%filter>
    tr/a-z/A-Z/
    </%filter>

The following navigation bar uses a filter to "unlink" and highlight
the item corresponding to the current page:

    <a href="/">Home</a> | <a href="/products/">Products</a> | 
    <a href="/bg.html">Background</a> | <a href="/finance/">Financials</a> | 
    <a href="/support/">Tech Support</a> | <a href="/contact.html">Contact Us</a>

    <%filter>
    my $uri = $r->uri;
    s{<a href="$uri/?">(.*?)</a>} {<b>$1</b>}i;
    </%filter>

This allows a designer to code such a navigation bar intuitively
without C<if> statements surrounding each link!  Note that the regular
expression need not be very robust as long as you have control over what
will appear in the body.

=head2 $m->call_self command

This command allows you to filter both the output and the return value
of the current component. It is fairly advanced; for most purposes the
C<E<lt>%filterE<gt>> tag above will be sufficient and simpler.

C<$m-E<gt>call_self> takes two arguments.  The first is a scalar reference and
will be populated with the component output.  The second is either a
scalar or list reference and will be populated with the component
return value; the type of reference determines whether
the component will be called in scalar or list context. Both of these
arguments are optional; you may pass undef if you don't care about one
of them.

C<$m-E<gt>call_self> acts like a fork() in the sense that it will return twice
with different values.  When it returns 0, you allow control to pass
through to the rest of your component.  When it returns 1, that means
the component has finished and you can begin filtering the output
and/or return value. (Don't worry, it doesn't really do a fork! See
next section for explanation.)

The following examples would generally appear at the top of a C<E<lt>%initE<gt>>
section.  Here is a no-op C<$m-E<gt>call_self> that leaves the output and
return value untouched:

    if ($m->call_self(my \$output, my \$retval)) {  # assumes Perl 5.005 or greater
        $m->out($output);
        return $retval;
    }

Here is a simple output filter that makes the output all uppercase,
just like the C<E<lt>%filterE<gt>> example above. Note that we ignore both
the original and the final return value.

    if ($m->call_self(my \$output, undef)) {
        $m->out(uc($output));
        return;
    }

C<$m-E<gt>call_self> can even convert output to a return value or vice versa.
In the next component we provide a nice friendly format for
non-programmers to represent data with, and use a filter to construct
and return a corresponding Perl data structure from it:

    # id        lastname        firstname
    59286       Sherman         Karen
    31776       Dawson          Robert
    29482       Lee             Brenda
    ...

    <%init>
    if ($m->call_self(my \$output, undef)) {
        foreach (split("\n",$output)) {
            next if /^#/ || !/\S/;
            my @vals = split(/\s+/);
            push(@people,{id=>$vals[0],last=>$vals[1],first=>$vals[2]});
        }
        return @people;
    }
    </%init>

Now we can get a list of hashes directly from this component.    

=head2 How filtering works

C<$m-E<gt>call_self> (and C<E<lt>%filterE<gt>>, which is built on it) uses a bit of
magic to accomplish everything in one line.  If you're curious, here's
how it works:

o A component foo calls C<$m-E<gt>call_self> for the first time.

o C<$m-E<gt>call_self> sets an internal flag and calls foo again recursively,
changing the output stream to capture content into a buffer.

o foo again calls C<$m-E<gt>call_self> which, seeing the flag, returns 0 immediately.

o foo goes about its business and generates content into the C<$m-E<gt>call_self> buffer.

o When control is returned to C<$m-E<gt>call_self>, it places the content
and return value in the references provided, and returns 1.

=head1 OTHER SYNTAX

=head2 E<lt>%docE<gt>

Text in this section is treated as a comment and ignored. Most useful
for a component's main documentation.  One can easily write a program
to sift through a set of components and pull out their E<lt>%docE<gt>
blocks to form a reference page.

Can also be used for in-line comments, though it is an admittedly
cumbersome comment marker.  Another option is '%#':

    %# this is a comment

These comments differ from HTML comments in that they do not appear in
the HTML.

=head2 E<lt>%textE<gt>

Text in this section is passed through unmodified by Mason. Any Mason
syntax inside it is ignored.  Useful, for example, when documenting
Mason itself from a component:

    <%text>
    % This is an example of a Perl line.
    <% This is an example of an expression block. %>
    </%text>

This works for almost everything, but doesn't let you output
E<lt>/%textE<gt> itself! When all else fails, use C<$m-E<gt>out>:

    %$m->out('The tags are <%text> and </%text>.');

=head2 Escaping expressions

Mason has facilities for I<escaping> the output from <% %> tags,
on either a site-wide or a per-expression basis.

Any <% %> expression may be terminated by a '|' and one or more
single-letter escape flags (plus arbitrary whitespace):

    <% $file_data |h %>

The current valid flags are

    h - escape for HTML ('<' => '&lt;', etc.)
    u - escape for URL query string (':' => '%3A', etc.) - all but [a-zA-Z0-9_.-]
    n - turn off default escape flags

The administrator may specify a set of default escape flags via the
L<Compiler/default_escape_flags> Compiler parameter. For example, if
the administrator specifies

    default_escape_flags=>'h'

then all <% %> expressions will automatically be HTML-escaped.  In
this case you would use the C<n> flag to turn off HTML-escaping for a
specific expression:

    <% $html_block |n %>

Future Mason versions will allow user-defined and multi-letter escape flags.

=head2 Backslash at end of line

A backslash (\) at the end of a line suppresses the newline. In HTML
components, this is mostly useful for fixed width areas like <PRE>
tags, since browsers ignore white space for the most part. An example:

    <PRE>
    foo
    % if (1) {
    bar
    % }
    baz
    </PRE>

outputs

    foo
    bar
    baz

because of the newlines on lines 2 and 4. (Lines 3 and 5 do not
generate a newline because the entire line is taken by Perl.)
To suppress the newlines:

    <PRE>
    foo\
    % if (1) {
    bar\
    % }
    baz
    </PRE>

which prints

    foobarbaz

=head1 DATA CACHING

Mason's data caching interface allows components to cache the results
of computation for improved performance.  Anything may be cached, from
a block of HTML to a complex data structure.

Each component gets its own private, persistent data cache. Except
under special circumstances, one component does not access another
component's cache. Each cached value may be set to expire at a certain
time.

Data caching is implemented with DeWitt Clinton's C<Cache::Cache>
module. To get the full benefit out of caching you should I<read the
documentation> for C<Cache::Cache> as well as for relevant subclasses
(e.g. C<Cache::FileCache>). Our documentation here covers common usage
but skips many options and features.

=head2 Basic Usage

The C<$m-E<gt>cache> method returns an object representing the cache
for this component. Here's the typical usage of C<$m-E<gt>cache>:

    my $result = $m->cache->get('key');
    if (!defined($result)) {
        ... compute $result ...
        $m->cache->set('key', $result);
    }

C<$m-E<gt>cache-E<gt>get> attempts to retrieve this component's cache
value. If the value is available it is placed in I<$result>. If the
value is not available, C<$result> is computed and stored in the
cache by C<$m-E<gt>cache-E<gt>set>.

=head2 Multiple Keys/Values

A cache can store multiple keys and values. A value can be anything
serializable by C<Storable>, from a simple scalar to an arbitrary
complex list or hash reference:

    $m->cache->set('name', $string);
    $m->cache->set('friends',\@list);
    $m->cache->set('map', %hash);

=head2 Expiration

You may pass an optional third argument to C<$m-E<gt>cache-E<gt>set>
indicating when the data should expire:

    $m->cache->set('name1', $string1, '5min');   # Expire in 5 minutes
    $m->cache->set('name2', $string2, '3h');     # Expire in 3 hours

To change the expiration time for a piece of data, call C<set> again
with the new expiration. To expire an item immediately, use
C<$m-E<gt>cache-E<gt>remove>.

You can also expire a cache item from an external script; see
L<Accessing a Cache Externally> below.

=head2 Choosing a Cache Subclass

C<Cache::Cache> is a purely virtual API implemented by a variety of
subclasses. For example, Cache::FileCache implements the interface with a
set of directories and files, while Cache::MemoryCache implements the
interface in memory.

By default C<$m-E<gt>cache> uses Cache::FileCache, but you can override
this with the I<cache_class> keyword. The value must be the name of a
C<Cache::Cache> subclass; if it does not contain a "::", the prefix
"Cache::" is automatically prepended. For example:

    my $result = $m->cache(cache_class=>'MemoryCache')->get('key');
    $m->cache(cache_class=>'MemoryCache')->set('key', $result);

You can even specify different subclasses for different keys in the
same component. Just make sure the correct value is passed to all calls
to C<$m-E<gt>cache>; Mason does not remember which subclass you
have used for a given component or key.

=head2 Accessing a Cache Externally

To access a component's cache from outside the component (e.g. in an
external Perl script), you'll need have the following information:

=over

=item *

the namespace associated with the component. The function
C<HTML::Mason::Utils::data_cache_namespace>, given a component path, will
return the namespace.

=item *

the username associated with the cache; this is "mason" unless it has
been changed by the administrator.

=item *

the cache_root, for file-based caches only. Defaults to the
"cache" subdirectory under the Mason data directory.

=back

Given this information you can get a handle on the component's cache.
For example, the following code expires a cache item for component
C</foo/bar>, assuming the data directory is C</usr/local/www/mason>
and the cache subclass is C<Cache::FileCache>:

    use HTML::Mason::Utils qw(data_cache_namespace);
    
    my $cache = new Cache::FileCache
        (namespace => data_cache_namespace("/foo/bar"),
	 cache_root => "/usr/local/www/mason/cache",
	 username => "mason");
    $cache->remove('key1');

=head2 Guarantees (or lack thereof)

C<Cache::Cache> will make a best effort to cache data until it expires,
but will not guarantee it.  The data cache is not a permanent reliable
store in itself; you should not place in the cache critical data
(e.g. user session information) that cannot be regenerated from
another source such as a database.  Write your code assuming that any
C<set> command could fail, and that the cache could disappear at any
time.

=head1 SENDING HTTP HEADERS

Mason automatically sends HTTP headers via $r->send_http_header. It
tries to delay sending headers till the last possible moment, to give
components a chance to affect headers (using $r->header_out,
$r->content_type, etc.) It won't send headers if they've already
been sent manually.

To determine the exact header behavior on your system, you need to
know whether your server's C<out_mode> is 'batch' (meaning all output
is buffered until the end) or 'stream' (all output is sent
immediately). Your administrator should have this information. If your
administrator doesn't know then it is probably 'batch', the default.

In batch mode the header situation is extremely simple: Mason waits
until the very end of the request to send headers. Any component can
modify or augment the headers.

In stream mode the header situation is more complex.  Mason will send
headers just before sending the first non-whitespace output.  Any
initial whitespace output is buffered up until after headers are
sent. This means that if you want to affect the headers in stream
mode, you must do so before any component sends non-whitespace
output. Generally this takes place in an C<E<lt>%initE<gt>> section.

For example, the following top-level component calls another component
to see whether the user has a cookie; if not, it inserts a new cookie
into the header.

    <%init>
    my $cookie = $m->comp('/shared/get_user_cookie');
    if (!$cookie) {
	$cookie = new CGI::Cookie (...);
	$r->headers_out->add('Set-cookie' => $cookie);	
    }
    ...
    </%init>

In batch mode this code will always work.  In stream mode this code
will work as long as I<get_user_cookie> doesn't output anything besides
whitespace (and given its functional nature, it shouldn't).

The administrator can turn off automatic header sending via the
L<ApacheHandler/auto_send_headers> ApacheHandler parameter.

=head1 USING THE PERL DEBUGGER

You can use the perl debugger in conjunction with a live
mod_perl/Mason server with the help of Apache::DB, available from
CPAN. Refer to the Apache::DB documentation for details.

The only tricky thing about debugging Mason pages is that components
are implemented by anonymous subroutines, which are not easily
breakpoint'able. To remedy this, Mason calls the dummy subroutine
C<debug_hook> at the beginning of each component. You can breakpoint
this subroutine like so:

    b HTML::Mason::Request::debug_hook

debug_hook is called with two parameters: the current Request object
and the full component path. Thus you can breakpoint specific
components using a conditional on $_[1]:

    b HTML::Mason::Request::debug_hook $_[1] =~ /component name/

You can avoid all that typing by adding the following to your
~/.perldb file:

    # Perl debugger aliases for Mason
    $DB::alias{mb} = 's/^mb\b/b HTML::Mason::Request::debug_hook/';

which reduces the previous examples to just: 

    mb
    mb $_[1] =~ /component name/

=head1 THE PREVIEWER

Mason comes with a web-based debugging utility that lets you test your
components by throwing fake requests at them. Adjustable parameters
include: UserAgent, Time, HTTP Referer, O/S and so on. For example,
imagine a component whose color scheme is supposed to change each
morning, noon, and night. Using the Previewer, it would be simple to
set the perceived time forward 1,5 or 8 hours to test the component at
various times of day.

The Previewer also provides a debug trace of a page, showing all
components being called and indicating the portion of HTML each
component is responsible for. For pages constructed from more than a
few components, these traces are quite useful for finding the
component that is outputting a particular piece of HTML.

Your administrator will give you the main Previewer URL, and a set of
preview ports that you will use to view your site under various
conditions. For the purpose of this discussion we'll assume the
Previewer is up and working, that the Previewer URL is
http://www.yoursite.com/preview, and the preview ports are 3001 to
3005.

Take a look at the main Previewer page.  The top part contains the
most frequently used options, such as time and display mode.  The
middle part contains a table of your saved configurations; if this is
your first time using the Previewer, it will be empty.  The bottom part
contains less frequently used options, such as setting the user agent
and referer.

Try clicking "Save".  This will save the displayed settings under the
chosen preview port, say 3001, and redraw the page. Under "Saved Port
Settings", you should see a single row showing this configuration.
Your configurations are saved permanently in a file. If a
username/password is required to access the Previewer, then each user
has his/her own configuration file.

The "View" button should display your site's home page.  If not, then
the Previewer may not be set up correctly; contact your administrator
or see the Administrator's Guide.

Go back to the main Previewer page, change the display mode from
"HTML" to "debug", change the preview port to 3002, and click "Save"
again.  You should now see a second saved configuration.

Click "View".  This time instead of seeing the home page as HTML,
you'll get a debug trace with several sections.  The first section
shows a numbered hierarchy of components used to generate this
page. The second section is the HTML source, with each line annotated
on the left with the number of the component that generated it.  Try
clicking on the numbers in the first section; this brings you to the
place in the second section where that component first appears.  If
there's a particular piece of HTML you want to change on a page,
searching in the annotated source will let you quickly determine which
component is responsible.

The final section of the debug page shows input and output HTTP
headers.  Note that some of these are simulated due to your Previewer
settings.  For example, if you specified a particular user agent in
your Previewer configuration, then the User-Agent header is simulated;
otherwise it reflects your actual browser.

=head1 OBJECT-ORIENTED TECHNIQUES

Earlier you learned how to assign a common template to an entire
hierarchy of pages using C<autohandlers>. The basic template looks like:

    header HTML
    <% $m->call_next %>
    footer HTML

However, sometimes you'll want a more flexible template that adjusts
to the requested page.  You might want to allow each page or
subsection to specify a title, background color, or logo image while
leaving the rest of the template intact. You might want some pages or
subsections to use a different template, or to ignore templates
entirely.

These issues can be addressed with the object-oriented style
primitives introduced in Mason 0.85.

Note: we use the term object-oriented loosely. Mason borrows concepts
like inheritance, methods, and attributes from object methodology but
implements them in a shallow way to solve a particular set of
problems. Future redesigns may incorporate a deeper object
architecture if the current prototype proves successful.

=head2 Determining inheritance

Every component may have a single I<parent>. The default parent is a
component named C<autohandler> in the closest parent directory.  This
rule applies to autohandlers too: an autohandler may not have itself
as a parent but may have an autohandler further up the tree as its
parent.

You can use the C<inherit> flag to override a component's parent:

    <%flags>
    inherit=>'/foo/bar'
    </%flags>

If you specify undef as the parent, then the component inherits from no one. 
This is how to suppress templates.

Currently there is no way to specify a parent dynamically at run-time,
or to specify multiple parents.

=head2 Content wrapping

At page execution time, Mason builds a chain of components from the
called component, its parent, its parent's parent, and so
on. Execution begins with the top-most component; calling
C<$m-E<gt>call_next> passes control to the next component in the chain.  This
is the familiar autohandler "wrapping" behavior, generalized for any
number of arbitrarily named templates.

=head2 Accessing methods and attributes

A template can access methods and/or attributes of the requested
page. First, use C<$m-E<gt>base_comp> to get a handle on the
appropriate component:

    my $self = $m->base_comp;

$self now refers to the component corresponding to the requested page
(the component at the end of the chain).

To access a method for the page, use C<call_method>:

    $self->call_method('header');

or alternatively a path of the form 'SELF:method':

    <& SELF:header &>
    $m->comp('SELF:header')

In the context of a component path, SELF is shorthand for
C<$m-E<gt>base_comp>.

Each of the above looks for a method named 'header' in the page
component.  If no such method exists, the chain of parents is searched
upwards, until ultimately a "method not found" error occurs. Use
'method_exists' to avoid this error for questionable method calls:

    if ($self->method_exists('header')) { ...

To defer to the method of your parent, use C<parent>:

    $m->current_comp->parent->call_method('header')

or alternatively a path of the form 'PARENT:method':

    <& PARENT:header &>
    $m->comp('PARENT:header')

In the context of a component path, PARENT is shorthand for
C<$m-E<gt>current_comp-E<gt>parent>.

The rules for attributes are similar. To access an attribute for the
page, use C<attr>:

    my $color = $self->attr('color')

This looks for an attribute named 'color' in the $self component. If
no such attribute exists, the chain of parents is searched upwards,
until ultimately an "attribute not found" error occurs. Use
'attr_exists' to avoid this error for questionable attributes:

    if ($self->attr_exists('color')) { ...

=head2 Sharing data

A component's main body and its methods occupy separate lexical
scopes. Variables declared, say, in the C<E<lt>%initE<gt>> section of the main
component cannot be seen from methods.

To share variables, declare them either in the C<E<lt>%onceE<gt>> or C<E<lt>%sharedE<gt>>
section. Both sections have an all-inclusive scope. The C<E<lt>%onceE<gt>>
section runs once when the component loads; its variables are
persistent for the lifetime of the component. The C<E<lt>%sharedE<gt>> section
runs once per request (when needed), just before any code in the
component runs; its variables last only til the end of the request.

In the following example, various sections of code require information
about the logged-in user. We use a C<E<lt>%sharedE<gt>> section to fetch these
in a single request.

    <%attr>
    title=>sub { "Account for $full_name" }
    </%attr>
    
    <%method lefttoc>
    <i><% $full_name %></i>
    (<a href="logout.html">Log out</a>)<br>
    ...
    </%method>
    
    Welcome, <% $fname %>. Here are your options:
    
    <%shared>
    my $dbh = DBI::connect ...;
    my $user = $r->connection->user;
    my $sth = $dbh->prepare("select lname,fname, from users where user_id = ?");
    $sth->execute($user);
    my ($lname,$fname) = $sth->fetchrow_array;
    my $full_name = "$first $last";
    </%shared>

C<E<lt>%sharedE<gt>> presents a good alternative to C<E<lt>%initE<gt>> when data is needed
across multiple scopes. Outside these situations, C<E<lt>%initE<gt>> is preferred
for its slightly greater speed and predictable execution model.

=head2 Example

Let's say we have three components:

    /autohandler
    /products/autohandler
    /products/index.html

and that a request comes in for /products/index.html.

/autohandler contains a general template for the site, referring to a
number of standard methods and attributes for each page:

    <head>
    <title><& SELF:title &></title>
    </head>
    <body bgcolor="<% $self->attr('bgcolor') %>">
    <& SELF:header &>
    <table><tr><td>

    <% $m->call_next %>

    </td></tr></table>
    <& SELF:footer &>
    </body>

    <%init>
    my $self = $m->base_comp;
    ...
    </%init>

    <%attr>
    bgcolor=>'white'
    </%attr>

    <%method title>
    McGuffey Inc.
    </%method>

    <%method header>
    <h2><& SELF:title &></h2><p>
    </%method>

    <%method footer>
    </%method>

Notice how we provide defaults for each method and attribute, even if blank.

/products/autohandler overrides some attributes and methods for the
/products section of the site.

    <%attr>
    bgcolor=>'beige'
    </%attr>
    <%method title>
    McGuffey Inc.: Products
    </%method>

    <% $m->call_next %>

Note that this component, though it only defines attributes and
methods, must call C<$m-E<gt>call_next> if it wants the rest of the
chain to run.

/products/index.html might override a few attributes, but mainly provides
a primary section for the body.

=head1 COMMON TRAPS

=over

=item Do not use print or $r->print

Most Mason servers operate in "batch" mode, which means that
output is stored in a Mason buffer until the end of the request. Output
sent via print and $r->print, however, skips the Mason buffer and goes
directly to the client. This will result in output being printed out
of order. Always use C<$m-E<gt>out> instead of print/$r->print; it does the
right thing with regards to Mason buffering.

=item Do not call $r->content or "new CGI"

Mason calls C<$r-E<gt>content> itself to read request input, emptying
the input buffer and leaving a trap for the unwary: subsequent calls
to C<$r-E<gt>content> hang the server. This is a mod_perl "feature" that
may be fixed in an upcoming release.

For the same reason you should not create a CGI object like

  my $query = new CGI;

when handling a POST; the CGI module will try to reread request input
and hang. Instead, create an empty object:

  my $query = new CGI ("");

such an object can still be used for all of CGI's useful HTML output
functions. Or, if you really want to use CGI's input functions,
initialize the object from %ARGS:

  my $query = new CGI (\%ARGS);

=back

=head1 AUTHOR

Jonathan Swartz, swartz@pobox.com

=head1 SEE ALSO

L<HTML::Mason>,
L<HTML::Mason::Request>

=cut
